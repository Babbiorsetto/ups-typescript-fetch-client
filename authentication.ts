/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * OAuth
 * Retrive OAuth Bearer token on behalf of personal resources, not on behalf of another user
 *
 * OpenAPI spec version: 1.0.1
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import isomorphicFetch, { Response } from "node-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://wwwcie.ups.com/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(
        configuration?: Configuration,
        protected basePath: string = BASE_PATH,
        protected fetch: FetchAPI = isomorphicFetch
    ) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 *
 * @export
 * @interface ErrorResponseWrapper
 */
export interface ErrorResponseWrapper {
    /**
     *
     * @type {Array<Errors>}
     * @memberof ErrorResponseWrapper
     */
    errors?: Array<Errors>;
}
/**
 *
 * @export
 * @interface Errors
 */
export interface Errors {
    /**
     * Error code
     * @type {string}
     * @memberof Errors
     */
    code?: string;
    /**
     * Error message
     * @type {string}
     * @memberof Errors
     */
    message?: string;
}
/**
 *
 * @export
 * @interface GenerateTokenSuccessResponse
 */
export interface GenerateTokenSuccessResponse {
    /**
     * Container for token response.
     * @type {string}
     * @memberof GenerateTokenSuccessResponse
     */
    tokenType?: string;
    /**
     * Issue time of requested token.
     * @type {string}
     * @memberof GenerateTokenSuccessResponse
     */
    issuedAt?: string;
    /**
     * Client id for requested token.
     * @type {string}
     * @memberof GenerateTokenSuccessResponse
     */
    clientId?: string;
    /**
     * Token to be used in API requests.
     * @type {string}
     * @memberof GenerateTokenSuccessResponse
     */
    accessToken?: string;
    /**
     * Scope for requested token.
     * @type {string}
     * @memberof GenerateTokenSuccessResponse
     */
    scope?: string;
    /**
     * Expire time for requested token in seconds.
     * @type {string}
     * @memberof GenerateTokenSuccessResponse
     */
    expiresIn?: string;
    /**
     * Number of refreshes for requested token.
     * @type {string}
     * @memberof GenerateTokenSuccessResponse
     */
    refreshCount?: string;
    /**
     * Status for requested token.
     * @type {string}
     * @memberof GenerateTokenSuccessResponse
     */
    status?: string;
}
/**
 *
 * @export
 * @interface OauthTokenBody
 */
export interface OauthTokenBody {
    /**
     * Valid values: client_credentials
     * @type {string}
     * @memberof OauthTokenBody
     */
    grantType: string;
}
/**
 *
 * @export
 * @interface TokenErrorResponse
 */
export interface TokenErrorResponse {
    /**
     *
     * @type {ErrorResponseWrapper}
     * @memberof TokenErrorResponse
     */
    response?: ErrorResponseWrapper;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (
    configuration?: Configuration
) {
    return {
        /**
         *
         * @param {string} grantType
         * @param {string} [xMerchantId] Client merchant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateToken(
            grantType: string,
            xMerchantId?: string,
            options: any = {}
        ): FetchArgs {
            // verify required parameter 'grantType' is not null or undefined
            if (grantType === null || grantType === undefined) {
                throw new RequiredError(
                    "grantType",
                    "Required parameter grantType was null or undefined when calling generateToken."
                );
            }
            const localVarPath = `/security/v1/oauth/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign(
                { method: "POST" },
                options
            );
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication basicAuth required
            // http basic authentication required
            if (
                configuration &&
                (configuration.username || configuration.password)
            ) {
                localVarHeaderParameter["Authorization"] =
                    "Basic " +
                    btoa(configuration.username + ":" + configuration.password);
            }

            if (xMerchantId !== undefined && xMerchantId !== null) {
                localVarHeaderParameter["x-merchant-id"] = String(xMerchantId);
            }

            if (grantType !== undefined) {
                localVarFormParams.set("grant_type", grantType as any);
            }

            localVarHeaderParameter["Content-Type"] =
                "application/x-www-form-urlencoded";

            localVarUrlObj.query = Object.assign(
                {},
                localVarUrlObj.query,
                localVarQueryParameter,
                options.query
            );
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign(
                {},
                localVarHeaderParameter,
                options.headers
            );
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} grantType
         * @param {string} [xMerchantId] Client merchant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateToken(
            grantType: string,
            xMerchantId?: string,
            options?: any
        ): (
            fetch?: FetchAPI,
            basePath?: string
        ) => Promise<GenerateTokenSuccessResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(
                configuration
            ).generateToken(grantType, xMerchantId, options);
            return (
                fetch: FetchAPI = isomorphicFetch,
                basePath: string = BASE_PATH
            ) => {
                return fetch(
                    basePath + localVarFetchArgs.url,
                    localVarFetchArgs.options
                ).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
    configuration?: Configuration,
    fetch?: FetchAPI,
    basePath?: string
) {
    return {
        /**
         *
         * @param {string} grantType
         * @param {string} [xMerchantId] Client merchant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateToken(grantType: string, xMerchantId?: string, options?: any) {
            return DefaultApiFp(configuration).generateToken(
                grantType,
                xMerchantId,
                options
            )(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @param {string} grantType
     * @param {string} [xMerchantId] Client merchant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public generateToken(
        grantType: string,
        xMerchantId?: string,
        options?: any
    ) {
        return DefaultApiFp(this.configuration).generateToken(
            grantType,
            xMerchantId,
            options
        )(this.fetch, this.basePath);
    }
}
