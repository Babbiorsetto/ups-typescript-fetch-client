/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Paperless Document
 * The Paperless Document API web service allows the users to upload their own customized trade documents for customs clearance to Forms History. 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import isomorphicFetch, { Response } from "node-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://wwwcie.ups.com/api/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Warning code returned by the system.
 * @export
 */
export type AlertCode = string
/**
 * Warning messages returned by the system.
 * @export
 */
export type AlertDescription = string
/**
 * Paperless Document API Request container for deleting user created forms.  N/A
 * @export
 * @interface DeleteRequest
 */
export interface DeleteRequest {
    /**
     * 
     * @type {DeleteRequestRequest}
     * @memberof DeleteRequest
     */
    Request: DeleteRequestRequest;
    /**
     * The Shipper's UPS Account Number.  Your UPS Account Number must have 'Upload Forms Created Offline' enabled to use this webservice.
     * @type {string}
     * @memberof DeleteRequest
     */
    ShipperNumber: string;
    /**
     * DocumentId representing uploaded document to Forms History.  Only one DocumentID will be accepted for delete request.
     * @type {string}
     * @memberof DeleteRequest
     */
    DocumentID: string;
}
/**
 * DocumentId representing uploaded document to Forms History.  Only one DocumentID will be accepted for delete request.
 * @export
 */
export type DeleteRequestDocumentID = string
/**
 * Contains Paperless Document API deleted request criteria components.  N/A
 * @export
 * @interface DeleteRequestRequest
 */
export interface DeleteRequestRequest {
    /**
     * Enables the user to specify optional processing. Currently, there is no optional process in Paperless Document API.  N/A
     * @type {string}
     * @memberof DeleteRequestRequest
     */
    RequestOption?: string;
    /**
     * Not Used.
     * @type {string}
     * @memberof DeleteRequestRequest
     */
    SubVersion?: string;
    /**
     * 
     * @type {RequestTransactionReference}
     * @memberof DeleteRequestRequest
     */
    TransactionReference?: RequestTransactionReference;
}
/**
 * The Shipper's UPS Account Number.  Your UPS Account Number must have 'Upload Forms Created Offline' enabled to use this webservice.
 * @export
 */
export type DeleteRequestShipperNumber = string
/**
 * Paperless Document API response container for delete request.  N/A
 * @export
 * @interface DeleteResponse
 */
export interface DeleteResponse {
    /**
     * 
     * @type {DeleteResponseResponse}
     * @memberof DeleteResponse
     */
    Response: DeleteResponseResponse;
}
/**
 * Response container.
 * @export
 * @interface DeleteResponseResponse
 */
export interface DeleteResponseResponse {
    /**
     * 
     * @type {ResponseResponseStatus}
     * @memberof DeleteResponseResponse
     */
    ResponseStatus: ResponseResponseStatus;
    /**
     * 
     * @type {ResponseAlert}
     * @memberof DeleteResponseResponse
     */
    Alert?: ResponseAlert;
    /**
     * 
     * @type {ResponseTransactionReference}
     * @memberof DeleteResponseResponse
     */
    TransactionReference?: ResponseTransactionReference;
}
/**
 * DocumentID represents a document uploaded to Forms History.  N/A
 * @export
 */
export type FormsHistoryDocumentIDDocumentID = string
/**
 * N/A  
 * @export
 * @interface PAPERLESSDOCUMENTDeleteRequestWrapper
 */
export interface PAPERLESSDOCUMENTDeleteRequestWrapper {
    /**
     * 
     * @type {DeleteRequest}
     * @memberof PAPERLESSDOCUMENTDeleteRequestWrapper
     */
    DeleteRequest: DeleteRequest;
}
/**
 * N/A  
 * @export
 * @interface PAPERLESSDOCUMENTDeleteResponseWrapper
 */
export interface PAPERLESSDOCUMENTDeleteResponseWrapper {
    /**
     * 
     * @type {DeleteResponse}
     * @memberof PAPERLESSDOCUMENTDeleteResponseWrapper
     */
    DeleteResponse: DeleteResponse;
}
/**
 * N/A  
 * @export
 * @interface PAPERLESSDOCUMENTRequestWrapper
 */
export interface PAPERLESSDOCUMENTRequestWrapper {
    /**
     * 
     * @type {PushToImageRepositoryRequest}
     * @memberof PAPERLESSDOCUMENTRequestWrapper
     */
    PushToImageRepositoryRequest: PushToImageRepositoryRequest;
}
/**
 * N/A  
 * @export
 * @interface PAPERLESSDOCUMENTResponseWrapper
 */
export interface PAPERLESSDOCUMENTResponseWrapper {
    /**
     * 
     * @type {PushToImageRepositoryResponse}
     * @memberof PAPERLESSDOCUMENTResponseWrapper
     */
    PushToImageRepositoryResponse: PushToImageRepositoryResponse;
}
/**
 * N/A  
 * @export
 * @interface PAPERLESSDOCUMENTUploadRequestWrapper
 */
export interface PAPERLESSDOCUMENTUploadRequestWrapper {
    /**
     * 
     * @type {UploadRequest}
     * @memberof PAPERLESSDOCUMENTUploadRequestWrapper
     */
    UploadRequest: UploadRequest;
}
/**
 * N/A  
 * @export
 * @interface PAPERLESSDOCUMENTUploadResponseWrapper
 */
export interface PAPERLESSDOCUMENTUploadResponseWrapper {
    /**
     * 
     * @type {UploadResponse}
     * @memberof PAPERLESSDOCUMENTUploadResponseWrapper
     */
    UploadResponse: UploadResponse;
}
/**
 * Paperless Document API request container for push to Image Repository.  N/A
 * @export
 * @interface PushToImageRepositoryRequest
 */
export interface PushToImageRepositoryRequest {
    /**
     * 
     * @type {PushToImageRepositoryRequestRequest}
     * @memberof PushToImageRepositoryRequest
     */
    Request: PushToImageRepositoryRequestRequest;
    /**
     * The Shipper's UPS Account Number.  Your UPS Account Number must have 'Upload Forms Created Offline' enabled to use this webservice.
     * @type {string}
     * @memberof PushToImageRepositoryRequest
     */
    ShipperNumber: string;
    /**
     * 
     * @type {PushToImageRepositoryRequestFormsHistoryDocumentID}
     * @memberof PushToImageRepositoryRequest
     */
    FormsHistoryDocumentID: PushToImageRepositoryRequestFormsHistoryDocumentID;
    /**
     * FormsGroupID would be required in Push Request if user needs to update uploaded DocumentID(s) in Forms History.  N/A
     * @type {string}
     * @memberof PushToImageRepositoryRequest
     */
    FormsGroupID?: string;
    /**
     * Shipment Identifier is required for this request.  N/A
     * @type {string}
     * @memberof PushToImageRepositoryRequest
     */
    ShipmentIdentifier: string;
    /**
     * The date and time of the processed shipment. Required only for small package shipments. The valid format is yyyy-MM-dd-HH.mm.ss  N/A
     * @type {string}
     * @memberof PushToImageRepositoryRequest
     */
    ShipmentDateAndTime?: string;
    /**
     * Valid values are: 1 = small package, 2 = freight.  N/A
     * @type {string}
     * @memberof PushToImageRepositoryRequest
     */
    ShipmentType: string;
    /**
     * PRQ Confirmation being specified by client. Required for freight shipments.  N/A
     * @type {string}
     * @memberof PushToImageRepositoryRequest
     */
    PRQConfirmationNumber?: string;
    /**
     * UPS Tracking Number associated with this shipment. Required only for small package shipment.  N/A
     * @type {Array<string>}
     * @memberof PushToImageRepositoryRequest
     */
    TrackingNumber?: Array<string>;
}
/**
 * FormsGroupID would be required in Push Request if user needs to update uploaded DocumentID(s) in Forms History.  N/A
 * @export
 */
export type PushToImageRepositoryRequestFormsGroupID = string
/**
 * The container for DocumentID(s).  N/A
 * @export
 * @interface PushToImageRepositoryRequestFormsHistoryDocumentID
 */
export interface PushToImageRepositoryRequestFormsHistoryDocumentID {
    /**
     * DocumentID represents a document uploaded to Forms History.  N/A
     * @type {Array<string>}
     * @memberof PushToImageRepositoryRequestFormsHistoryDocumentID
     */
    DocumentID: Array<string>;
}
/**
 * PRQ Confirmation being specified by client. Required for freight shipments.  N/A
 * @export
 */
export type PushToImageRepositoryRequestPRQConfirmationNumber = string
/**
 * Contains Paperless Document API PushToImageRepository request criteria components.  N/A
 * @export
 * @interface PushToImageRepositoryRequestRequest
 */
export interface PushToImageRepositoryRequestRequest {
    /**
     * Enables the user to specify optional processing. Currently, there is no optional process in Paperless Document API.  N/A
     * @type {string}
     * @memberof PushToImageRepositoryRequestRequest
     */
    RequestOption?: string;
    /**
     * Not Used.
     * @type {string}
     * @memberof PushToImageRepositoryRequestRequest
     */
    SubVersion?: string;
    /**
     * 
     * @type {RequestTransactionReference}
     * @memberof PushToImageRepositoryRequestRequest
     */
    TransactionReference?: RequestTransactionReference;
}
/**
 * The date and time of the processed shipment. Required only for small package shipments. The valid format is yyyy-MM-dd-HH.mm.ss  N/A
 * @export
 */
export type PushToImageRepositoryRequestShipmentDateAndTime = string
/**
 * Shipment Identifier is required for this request.  N/A
 * @export
 */
export type PushToImageRepositoryRequestShipmentIdentifier = string
/**
 * Valid values are: 1 = small package, 2 = freight.  N/A
 * @export
 */
export type PushToImageRepositoryRequestShipmentType = string
/**
 * The Shipper's UPS Account Number.  Your UPS Account Number must have 'Upload Forms Created Offline' enabled to use this webservice.
 * @export
 */
export type PushToImageRepositoryRequestShipperNumber = string
/**
 * UPS Tracking Number associated with this shipment. Required only for small package shipment.  N/A
 * @export
 */
export type PushToImageRepositoryRequestTrackingNumber = string
/**
 * Paperless Document API response container for Push To Image Repository request.  N/A
 * @export
 * @interface PushToImageRepositoryResponse
 */
export interface PushToImageRepositoryResponse {
    /**
     * 
     * @type {PushToImageRepositoryResponseResponse}
     * @memberof PushToImageRepositoryResponse
     */
    Response: PushToImageRepositoryResponseResponse;
    /**
     * FormsGroupID is a consolidated ID representing one or multiple DocumentID(s).  N/A
     * @type {string}
     * @memberof PushToImageRepositoryResponse
     */
    FormsGroupID?: string;
}
/**
 * FormsGroupID is a consolidated ID representing one or multiple DocumentID(s).  N/A
 * @export
 */
export type PushToImageRepositoryResponseFormsGroupID = string
/**
 * Response container.
 * @export
 * @interface PushToImageRepositoryResponseResponse
 */
export interface PushToImageRepositoryResponseResponse {
    /**
     * 
     * @type {ResponseResponseStatus}
     * @memberof PushToImageRepositoryResponseResponse
     */
    ResponseStatus: ResponseResponseStatus;
    /**
     * 
     * @type {ResponseAlert}
     * @memberof PushToImageRepositoryResponseResponse
     */
    Alert?: ResponseAlert;
    /**
     * 
     * @type {ResponseTransactionReference}
     * @memberof PushToImageRepositoryResponseResponse
     */
    TransactionReference?: ResponseTransactionReference;
}
/**
 * Enables the user to specify optional processing. Currently, there is no optional process in Paperless Document API.  N/A
 * @export
 */
export type RequestRequestOption = string
/**
 * Not Used.
 * @export
 */
export type RequestSubVersion = string
/**
 * TransactionReference identifies transactions between client and server.  N/A
 * @export
 * @interface RequestTransactionReference
 */
export interface RequestTransactionReference {
    /**
     * The CustomerContext Information which will be echoed during response.
     * @type {string}
     * @memberof RequestTransactionReference
     */
    CustomerContext?: string;
}
/**
 * Alert Container. There can be zero to many alert containers with code and description.  N/A
 * @export
 * @interface ResponseAlert
 */
export interface ResponseAlert {
    /**
     * Warning code returned by the system.
     * @type {string}
     * @memberof ResponseAlert
     */
    Code: string;
    /**
     * Warning messages returned by the system.
     * @type {string}
     * @memberof ResponseAlert
     */
    Description: string;
}
/**
 * Response status container.  N/A
 * @export
 * @interface ResponseResponseStatus
 */
export interface ResponseResponseStatus {
    /**
     * Identifies the success or failure of the transaction. Valid values are 0 = Failed and 1 = Successful.
     * @type {string}
     * @memberof ResponseResponseStatus
     */
    Code: string;
    /**
     * Describes Response Status Code.  Returns text of \"Success\" or \"Failure\".
     * @type {string}
     * @memberof ResponseResponseStatus
     */
    Description: string;
}
/**
 * Identifies the success or failure of the transaction. Valid values are 0 = Failed and 1 = Successful.
 * @export
 */
export type ResponseStatusCode = string
/**
 * Describes Response Status Code.  Returns text of \"Success\" or \"Failure\".
 * @export
 */
export type ResponseStatusDescription = string
/**
 * Transaction Reference Container.  N/A
 * @export
 * @interface ResponseTransactionReference
 */
export interface ResponseTransactionReference {
    /**
     * The CustomerContext Information which will be echoed during response.
     * @type {string}
     * @memberof ResponseTransactionReference
     */
    CustomerContext?: string;
}
/**
 * The CustomerContext Information which will be echoed during response.
 * @export
 */
export type TransactionReferenceCustomerContext = string
/**
 * Paperless Document API Request container for uploading User Created Forms.  N/A
 * @export
 * @interface UploadRequest
 */
export interface UploadRequest {
    /**
     * 
     * @type {UploadRequestRequest}
     * @memberof UploadRequest
     */
    Request: UploadRequestRequest;
    /**
     * The Shipper's UPS Account Number.  Your UPS Account Number must have 'Upload Forms Created Offline' enabled to use this webservice.
     * @type {string}
     * @memberof UploadRequest
     */
    ShipperNumber: string;
    /**
     * 
     * @type {UploadRequestUserCreatedForm}
     * @memberof UploadRequest
     */
    UserCreatedForm: UploadRequestUserCreatedForm;
}
/**
 * Contains Paperless Document API upload request criteria components.  N/A
 * @export
 * @interface UploadRequestRequest
 */
export interface UploadRequestRequest {
    /**
     * Enables the user to specify optional processing. Currently, there is no optional process in Paperless Document API.  N/A
     * @type {string}
     * @memberof UploadRequestRequest
     */
    RequestOption?: string;
    /**
     * Not Used.
     * @type {string}
     * @memberof UploadRequestRequest
     */
    SubVersion?: string;
    /**
     * 
     * @type {RequestTransactionReference}
     * @memberof UploadRequestRequest
     */
    TransactionReference?: RequestTransactionReference;
}
/**
 * The Shipper's UPS Account Number.  Your UPS Account Number must have 'Upload Forms Created Offline' enabled to use this webservice.
 * @export
 */
export type UploadRequestShipperNumber = string
/**
 * The container for User Created Form. The container holds the file. Total number of allowed files per shipment is 13.  N/A
 * @export
 * @interface UploadRequestUserCreatedForm
 */
export interface UploadRequestUserCreatedForm {
    /**
     * The name of the file.  N/A
     * @type {string}
     * @memberof UploadRequestUserCreatedForm
     */
    UserCreatedFormFileName: string;
    /**
     * The user created form file.  The maximum allowable size of each file is restricted to 10 MB.                                                                                                                                                                                                         Note: The maximum allowable size of each file is restriced to 1MB in CIE (Customer Integration Environment).
     * @type {string}
     * @memberof UploadRequestUserCreatedForm
     */
    UserCreatedFormFile: string;
    /**
     * The UserCreatedForm file format.  The allowed file formats are bmp, doc, gif, jpg, pdf, png, rtf, tif, txt and xls. The only exceptions for having file format of length 4 character are docx and xlsx. All other file formats needs to be of length 3.
     * @type {string}
     * @memberof UploadRequestUserCreatedForm
     */
    UserCreatedFormFileFormat: string;
    /**
     * The type of documents in UserCreatedForm file.  The allowed document types are 001 - Authorization Form, 002 - Commercial Invoice, 003 - Certificate of Origin, 004 - Export Accompanying Document, 005 - Export License, 006 - Import Permit, 007 - One Time NAFTA, 008 - Other Document, 009 - Power of Attorney, 010 - Packing List, 011 - SED Document, 012 - Shipper's Letter of Instruction, 013 - Declaration. The total number of documents allowed per file or per shipment is 13. Each document type needs to be three digits.
     * @type {string}
     * @memberof UploadRequestUserCreatedForm
     */
    UserCreatedFormDocumentType: string;
}
/**
 * Paperless Document API Response Container for upload request.  N/A
 * @export
 * @interface UploadResponse
 */
export interface UploadResponse {
    /**
     * 
     * @type {UploadResponseResponse}
     * @memberof UploadResponse
     */
    Response: UploadResponseResponse;
    /**
     * 
     * @type {UploadResponseFormsHistoryDocumentID}
     * @memberof UploadResponse
     */
    FormsHistoryDocumentID?: UploadResponseFormsHistoryDocumentID;
}
/**
 * The container for DocumentID(s).  N/A
 * @export
 * @interface UploadResponseFormsHistoryDocumentID
 */
export interface UploadResponseFormsHistoryDocumentID {
    /**
     * DocumentID represents a document uploaded to Forms History.  N/A
     * @type {string}
     * @memberof UploadResponseFormsHistoryDocumentID
     */
    DocumentID: string;
}
/**
 * Response container.
 * @export
 * @interface UploadResponseResponse
 */
export interface UploadResponseResponse {
    /**
     * 
     * @type {ResponseResponseStatus}
     * @memberof UploadResponseResponse
     */
    ResponseStatus: ResponseResponseStatus;
    /**
     * 
     * @type {ResponseAlert}
     * @memberof UploadResponseResponse
     */
    Alert?: ResponseAlert;
    /**
     * 
     * @type {ResponseTransactionReference}
     * @memberof UploadResponseResponse
     */
    TransactionReference?: ResponseTransactionReference;
}
/**
 * The type of documents in UserCreatedForm file.  The allowed document types are 001 - Authorization Form, 002 - Commercial Invoice, 003 - Certificate of Origin, 004 - Export Accompanying Document, 005 - Export License, 006 - Import Permit, 007 - One Time NAFTA, 008 - Other Document, 009 - Power of Attorney, 010 - Packing List, 011 - SED Document, 012 - Shipper's Letter of Instruction, 013 - Declaration. The total number of documents allowed per file or per shipment is 13. Each document type needs to be three digits.
 * @export
 */
export type UserCreatedFormUserCreatedFormDocumentType = string
/**
 * The user created form file.  The maximum allowable size of each file is restricted to 10 MB.                                                                                                                                                                                                         Note: The maximum allowable size of each file is restriced to 1MB in CIE (Customer Integration Environment).
 * @export
 */
export type UserCreatedFormUserCreatedFormFile = string
/**
 * The UserCreatedForm file format.  The allowed file formats are bmp, doc, gif, jpg, pdf, png, rtf, tif, txt and xls. The only exceptions for having file format of length 4 character are docx and xlsx. All other file formats needs to be of length 3.
 * @export
 */
export type UserCreatedFormUserCreatedFormFileFormat = string
/**
 * The name of the file.  N/A
 * @export
 */
export type UserCreatedFormUserCreatedFormFileName = string
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary The Paperless Document API web service allows the users to upload their own customized trade documents for customs clearance to Forms History. 
         * @param {string} version Version of API
         * @param {string} ShipperNumber Your Shipper Number
         * @param {string} DocumentId DocumentId representing uploaded document to Forms History.  Only one DocumentID will be accepted for delete request.
         * @param {string} [transId] An identifier unique to the request. Length 32
         * @param {string} [transactionSrc] An identifier of the client/source application that is making the request.Length 512
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(version: string, ShipperNumber: string, DocumentId: string, transId?: string, transactionSrc?: string, options: any = {}): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling _delete.');
            }
            // verify required parameter 'ShipperNumber' is not null or undefined
            if (ShipperNumber === null || ShipperNumber === undefined) {
                throw new RequiredError('ShipperNumber','Required parameter ShipperNumber was null or undefined when calling _delete.');
            }
            // verify required parameter 'DocumentId' is not null or undefined
            if (DocumentId === null || DocumentId === undefined) {
                throw new RequiredError('DocumentId','Required parameter DocumentId was null or undefined when calling _delete.');
            }
            const localVarPath = `/paperlessdocuments/{version}/DocumentId/ShipperNumber`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("oauth2", [])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (transId !== undefined && transId !== null) {
                localVarHeaderParameter['transId'] = String(transId);
            }

            if (transactionSrc !== undefined && transactionSrc !== null) {
                localVarHeaderParameter['transactionSrc'] = String(transactionSrc);
            }

            if (ShipperNumber !== undefined && ShipperNumber !== null) {
                localVarHeaderParameter['ShipperNumber'] = String(ShipperNumber);
            }

            if (DocumentId !== undefined && DocumentId !== null) {
                localVarHeaderParameter['DocumentId'] = String(DocumentId);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary The Paperless Document API web service allows the users to upload their own customized trade documents for customs clearance to Forms History. 
         * @param {PAPERLESSDOCUMENTRequestWrapper} body Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click &quot;Authorize&quot; and enter your application credentials, then populate the required parameters above and click &quot;Try it out&quot;.
         * @param {string} version Version of API
         * @param {string} ShipperNumber Shipper Number
         * @param {string} [transId] An identifier unique to the request. Length 32
         * @param {string} [transactionSrc] An identifier of the client/source application that is making the request.Length 512
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushToImageRepository(body: PAPERLESSDOCUMENTRequestWrapper, version: string, ShipperNumber: string, transId?: string, transactionSrc?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pushToImageRepository.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling pushToImageRepository.');
            }
            // verify required parameter 'ShipperNumber' is not null or undefined
            if (ShipperNumber === null || ShipperNumber === undefined) {
                throw new RequiredError('ShipperNumber','Required parameter ShipperNumber was null or undefined when calling pushToImageRepository.');
            }
            const localVarPath = `/paperlessdocuments/{version}/image`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("oauth2", [])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (transId !== undefined && transId !== null) {
                localVarHeaderParameter['transId'] = String(transId);
            }

            if (transactionSrc !== undefined && transactionSrc !== null) {
                localVarHeaderParameter['transactionSrc'] = String(transactionSrc);
            }

            if (ShipperNumber !== undefined && ShipperNumber !== null) {
                localVarHeaderParameter['ShipperNumber'] = String(ShipperNumber);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PAPERLESSDOCUMENTRequestWrapper" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary The Paperless Document API web service allows the users to upload,delete and push to image repository their own customized trade documents for customs clearance to Forms History. 
         * @param {PAPERLESSDOCUMENTUploadRequestWrapper} body Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click &quot;Authorize&quot; and enter your application credentials, then populate the required parameters above and click &quot;Try it out&quot;.
         * @param {string} version Version of API
         * @param {string} ShipperNumber Shipper Number
         * @param {string} [transId] An identifier unique to the request. Length 32
         * @param {string} [transactionSrc] An identifier of the client/source application that is making the request.Length 512
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload(body: PAPERLESSDOCUMENTUploadRequestWrapper, version: string, ShipperNumber: string, transId?: string, transactionSrc?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling upload.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling upload.');
            }
            // verify required parameter 'ShipperNumber' is not null or undefined
            if (ShipperNumber === null || ShipperNumber === undefined) {
                throw new RequiredError('ShipperNumber','Required parameter ShipperNumber was null or undefined when calling upload.');
            }
            const localVarPath = `/paperlessdocuments/{version}/upload`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("oauth2", [])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (transId !== undefined && transId !== null) {
                localVarHeaderParameter['transId'] = String(transId);
            }

            if (transactionSrc !== undefined && transactionSrc !== null) {
                localVarHeaderParameter['transactionSrc'] = String(transactionSrc);
            }

            if (ShipperNumber !== undefined && ShipperNumber !== null) {
                localVarHeaderParameter['ShipperNumber'] = String(ShipperNumber);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PAPERLESSDOCUMENTUploadRequestWrapper" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary The Paperless Document API web service allows the users to upload their own customized trade documents for customs clearance to Forms History. 
         * @param {string} version Version of API
         * @param {string} ShipperNumber Your Shipper Number
         * @param {string} DocumentId DocumentId representing uploaded document to Forms History.  Only one DocumentID will be accepted for delete request.
         * @param {string} [transId] An identifier unique to the request. Length 32
         * @param {string} [transactionSrc] An identifier of the client/source application that is making the request.Length 512
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(version: string, ShipperNumber: string, DocumentId: string, transId?: string, transactionSrc?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PAPERLESSDOCUMENTDeleteResponseWrapper> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration)._delete(version, ShipperNumber, DocumentId, transId, transactionSrc, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary The Paperless Document API web service allows the users to upload their own customized trade documents for customs clearance to Forms History. 
         * @param {PAPERLESSDOCUMENTRequestWrapper} body Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click &quot;Authorize&quot; and enter your application credentials, then populate the required parameters above and click &quot;Try it out&quot;.
         * @param {string} version Version of API
         * @param {string} ShipperNumber Shipper Number
         * @param {string} [transId] An identifier unique to the request. Length 32
         * @param {string} [transactionSrc] An identifier of the client/source application that is making the request.Length 512
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushToImageRepository(body: PAPERLESSDOCUMENTRequestWrapper, version: string, ShipperNumber: string, transId?: string, transactionSrc?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PAPERLESSDOCUMENTResponseWrapper> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).pushToImageRepository(body, version, ShipperNumber, transId, transactionSrc, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary The Paperless Document API web service allows the users to upload,delete and push to image repository their own customized trade documents for customs clearance to Forms History. 
         * @param {PAPERLESSDOCUMENTUploadRequestWrapper} body Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click &quot;Authorize&quot; and enter your application credentials, then populate the required parameters above and click &quot;Try it out&quot;.
         * @param {string} version Version of API
         * @param {string} ShipperNumber Shipper Number
         * @param {string} [transId] An identifier unique to the request. Length 32
         * @param {string} [transactionSrc] An identifier of the client/source application that is making the request.Length 512
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload(body: PAPERLESSDOCUMENTUploadRequestWrapper, version: string, ShipperNumber: string, transId?: string, transactionSrc?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PAPERLESSDOCUMENTUploadResponseWrapper> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).upload(body, version, ShipperNumber, transId, transactionSrc, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary The Paperless Document API web service allows the users to upload their own customized trade documents for customs clearance to Forms History. 
         * @param {string} version Version of API
         * @param {string} ShipperNumber Your Shipper Number
         * @param {string} DocumentId DocumentId representing uploaded document to Forms History.  Only one DocumentID will be accepted for delete request.
         * @param {string} [transId] An identifier unique to the request. Length 32
         * @param {string} [transactionSrc] An identifier of the client/source application that is making the request.Length 512
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(version: string, ShipperNumber: string, DocumentId: string, transId?: string, transactionSrc?: string, options?: any) {
            return DefaultApiFp(configuration)._delete(version, ShipperNumber, DocumentId, transId, transactionSrc, options)(fetch, basePath);
        },
        /**
         * 
         * @summary The Paperless Document API web service allows the users to upload their own customized trade documents for customs clearance to Forms History. 
         * @param {PAPERLESSDOCUMENTRequestWrapper} body Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click &quot;Authorize&quot; and enter your application credentials, then populate the required parameters above and click &quot;Try it out&quot;.
         * @param {string} version Version of API
         * @param {string} ShipperNumber Shipper Number
         * @param {string} [transId] An identifier unique to the request. Length 32
         * @param {string} [transactionSrc] An identifier of the client/source application that is making the request.Length 512
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushToImageRepository(body: PAPERLESSDOCUMENTRequestWrapper, version: string, ShipperNumber: string, transId?: string, transactionSrc?: string, options?: any) {
            return DefaultApiFp(configuration).pushToImageRepository(body, version, ShipperNumber, transId, transactionSrc, options)(fetch, basePath);
        },
        /**
         * 
         * @summary The Paperless Document API web service allows the users to upload,delete and push to image repository their own customized trade documents for customs clearance to Forms History. 
         * @param {PAPERLESSDOCUMENTUploadRequestWrapper} body Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click &quot;Authorize&quot; and enter your application credentials, then populate the required parameters above and click &quot;Try it out&quot;.
         * @param {string} version Version of API
         * @param {string} ShipperNumber Shipper Number
         * @param {string} [transId] An identifier unique to the request. Length 32
         * @param {string} [transactionSrc] An identifier of the client/source application that is making the request.Length 512
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload(body: PAPERLESSDOCUMENTUploadRequestWrapper, version: string, ShipperNumber: string, transId?: string, transactionSrc?: string, options?: any) {
            return DefaultApiFp(configuration).upload(body, version, ShipperNumber, transId, transactionSrc, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary The Paperless Document API web service allows the users to upload their own customized trade documents for customs clearance to Forms History. 
     * @param {string} version Version of API
     * @param {string} ShipperNumber Your Shipper Number
     * @param {string} DocumentId DocumentId representing uploaded document to Forms History.  Only one DocumentID will be accepted for delete request.
     * @param {string} [transId] An identifier unique to the request. Length 32
     * @param {string} [transactionSrc] An identifier of the client/source application that is making the request.Length 512
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public _delete(version: string, ShipperNumber: string, DocumentId: string, transId?: string, transactionSrc?: string, options?: any) {
        return DefaultApiFp(this.configuration)._delete(version, ShipperNumber, DocumentId, transId, transactionSrc, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary The Paperless Document API web service allows the users to upload their own customized trade documents for customs clearance to Forms History. 
     * @param {PAPERLESSDOCUMENTRequestWrapper} body Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click &quot;Authorize&quot; and enter your application credentials, then populate the required parameters above and click &quot;Try it out&quot;.
     * @param {string} version Version of API
     * @param {string} ShipperNumber Shipper Number
     * @param {string} [transId] An identifier unique to the request. Length 32
     * @param {string} [transactionSrc] An identifier of the client/source application that is making the request.Length 512
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pushToImageRepository(body: PAPERLESSDOCUMENTRequestWrapper, version: string, ShipperNumber: string, transId?: string, transactionSrc?: string, options?: any) {
        return DefaultApiFp(this.configuration).pushToImageRepository(body, version, ShipperNumber, transId, transactionSrc, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary The Paperless Document API web service allows the users to upload,delete and push to image repository their own customized trade documents for customs clearance to Forms History. 
     * @param {PAPERLESSDOCUMENTUploadRequestWrapper} body Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click &quot;Authorize&quot; and enter your application credentials, then populate the required parameters above and click &quot;Try it out&quot;.
     * @param {string} version Version of API
     * @param {string} ShipperNumber Shipper Number
     * @param {string} [transId] An identifier unique to the request. Length 32
     * @param {string} [transactionSrc] An identifier of the client/source application that is making the request.Length 512
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public upload(body: PAPERLESSDOCUMENTUploadRequestWrapper, version: string, ShipperNumber: string, transId?: string, transactionSrc?: string, options?: any) {
        return DefaultApiFp(this.configuration).upload(body, version, ShipperNumber, transId, transactionSrc, options)(this.fetch, this.basePath);
    }

}
